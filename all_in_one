#ifndef DENSETRACK_H_
#define DENSETRACK_H_

#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv/cxcore.h>
#include <ctype.h>
#include <unistd.h>
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <fstream>
#include <iostream>
#include <vector>
#include <list>
#include <string>

using namespace cv;

int start_frame = 0;
int end_frame = INT_MAX;
int scale_num = 8;
const float scale_stride = sqrt(2);

// parameters for descriptors
int patch_size = 32;
int nxy_cell = 2;
int nt_cell = 3;
float epsilon = 0.05;
const float min_flow = 0.4;

// parameters for tracking
double quality = 0.001;
int min_distance = 5;
int init_gap = 1;
int track_length = 15;

// parameters for rejecting trajectory
const float min_var = sqrt(3);
const float max_var = 50;
const float max_dis = 20;

typedef struct {
	int x;       // top left corner
	int y;
	int width;
	int height;
}RectInfo;

typedef struct {
    int width;   // resolution of the video
    int height;
    int length;  // number of frames
}SeqInfo;

typedef struct {
    int length;  // length of the trajectory
    int gap;     // initialization gap for feature re-sampling 
}TrackInfo;

typedef struct {
    int nBins;   // number of bins for vector quantization
    bool isHof; 
    int nxCells; // number of cells in x direction
    int nyCells; 
    int ntCells;
    int dim;     // dimension of the descriptor
    int height;  // size of the block for computing the descriptor
    int width;
}DescInfo; 

// integral histogram for the descriptors
typedef struct {
    int height;
    int width;
    int nBins;
    float* desc;
}DescMat;

class Track
{
public:
    std::vector<Point2f> point;
    std::vector<float> hog;
    std::vector<float> hof;
    std::vector<float> mbhX;
    std::vector<float> mbhY;
    int index;

    Track(const Point2f& point_, const TrackInfo& trackInfo, const DescInfo& hogInfo,
          const DescInfo& hofInfo, const DescInfo& mbhInfo)
        : point(trackInfo.length+1), hog(hogInfo.dim*trackInfo.length),
          hof(hofInfo.dim*trackInfo.length), mbhX(mbhInfo.dim*trackInfo.length), mbhY(mbhInfo.dim*trackInfo.length)
    {
        index = 0;
        point[0] = point_;
    }

    void addPoint(const Point2f& point_)
    {
        index++;
        point[index] = point_;
    }
};

#endif /*DENSETRACK_H_*/

#ifndef DESCRIPTORS_H_
#define DESCRIPTORS_H_

#include "DenseTrack.h"
using namespace cv;

// get the rectangle for computing the descriptor
void GetRect(const Point2f& point, RectInfo& rect, const int width, const int height, const DescInfo& descInfo)
{
    int x_min = descInfo.width/2;
    int y_min = descInfo.height/2;
    int x_max = width - descInfo.width;
    int y_max = height - descInfo.height;

    rect.x = std::min<int>(std::max<int>(cvRound(point.x) - x_min, 0), x_max);
    rect.y = std::min<int>(std::max<int>(cvRound(point.y) - y_min, 0), y_max);
    rect.width = descInfo.width;
    rect.height = descInfo.height;
}

// compute integral histograms for the whole image
void BuildDescMat(const Mat& xComp, const Mat& yComp, float* desc, const DescInfo& descInfo)
{
    float maxAngle = 360.f;
    int nDims = descInfo.nBins;
    // one more bin for hof
    int nBins = descInfo.isHof ? descInfo.nBins-1 : descInfo.nBins;
    const float angleBase = float(nBins)/maxAngle;

    int step = (xComp.cols+1)*nDims;
    int index = step + nDims;
    for(int i = 0; i < xComp.rows; i++, index += nDims) {
        const float* xc = xComp.ptr<float>(i);
        const float* yc = yComp.ptr<float>(i);

        // summarization of the current line
        std::vector<float> sum(nDims);
        for(int j = 0; j < xComp.cols; j++) {
            float x = xc[j];
            float y = yc[j];
            float mag0 = sqrt(x*x + y*y);
            float mag1;
            int bin0, bin1;

            // for the zero bin of hof
            if(descInfo.isHof && mag0 <= min_flow) {
                bin0 = nBins; // the zero bin is the last one
                mag0 = 1.0;
                bin1 = 0;
                mag1 = 0;
            }
            else {
                float angle = fastAtan2(y, x);
                if(angle >= maxAngle) angle -= maxAngle;

                // split the mag to two adjacent bins
                float fbin = angle * angleBase;
                bin0 = cvFloor(fbin);
                bin1 = (bin0+1)%nBins;

                mag1 = (fbin - bin0)*mag0;
                mag0 -= mag1;
            }

            sum[bin0] += mag0;
            sum[bin1] += mag1;

            for(int m = 0; m < nDims; m++, index++)
                desc[index] = desc[index-step] + sum[m];
        }
    }
}

// get a descriptor from the integral histogram
void GetDesc(const DescMat* descMat, RectInfo& rect, DescInfo descInfo, std::vector<float>& desc, const int index)
{
    int dim = descInfo.dim;
    int nBins = descInfo.nBins;
    int height = descMat->height;
    int width = descMat->width;

    int xStride = rect.width/descInfo.nxCells;
    int yStride = rect.height/descInfo.nyCells;
    int xStep = xStride*nBins;
    int yStep = yStride*width*nBins;

    // iterate over different cells
    int iDesc = 0;
    std::vector<float> vec(dim);
    for(int xPos = rect.x, x = 0; x < descInfo.nxCells; xPos += xStride, x++)
    for(int yPos = rect.y, y = 0; y < descInfo.nyCells; yPos += yStride, y++) {
        // get the positions in the integral histogram
        const float* top_left = descMat->desc + (yPos*width + xPos)*nBins;
        const float* top_right = top_left + xStep;
        const float* bottom_left = top_left + yStep;
        const float* bottom_right = bottom_left + xStep;

        for(int i = 0; i < nBins; i++) {
            float sum = bottom_right[i] + top_left[i] - bottom_left[i] - top_right[i];
            vec[iDesc++] = std::max<float>(sum, 0) + epsilon;
        }
    }

    float norm = 0;
    for(int i = 0; i < dim; i++)
        norm += vec[i];
    if(norm > 0) norm = 1./norm;

    int pos = index*dim;
    for(int i = 0; i < dim; i++)
        desc[pos++] = sqrt(vec[i]*norm);
}

// for HOG descriptor
void HogComp(const Mat& img, float* desc, DescInfo& descInfo)
{
    Mat imgX, imgY;
    Sobel(img, imgX, CV_32F, 1, 0, 1);
    Sobel(img, imgY, CV_32F, 0, 1, 1);
    BuildDescMat(imgX, imgY, desc, descInfo);
}

// for HOF descriptor
void HofComp(const Mat& flow, float* desc, DescInfo& descInfo)
{
    Mat flows[2];
    split(flow, flows);
    BuildDescMat(flows[0], flows[1], desc, descInfo);
}

// for MBH descriptor
void MbhComp(const Mat& flow, float* descX, float* descY, DescInfo& descInfo)
{
    Mat flows[2];
    split(flow, flows);

    Mat flowXdX, flowXdY, flowYdX, flowYdY;
    Sobel(flows[0], flowXdX, CV_32F, 1, 0, 1);
    Sobel(flows[0], flowXdY, CV_32F, 0, 1, 1);
    Sobel(flows[1], flowYdX, CV_32F, 1, 0, 1);
    Sobel(flows[1], flowYdY, CV_32F, 0, 1, 1);

    BuildDescMat(flowXdX, flowXdY, descX, descInfo);
    BuildDescMat(flowYdX, flowYdY, descY, descInfo);
}

// check whether a trajectory is valid or not
bool IsValid(std::vector<Point2f>& track, float& mean_x, float& mean_y, float& var_x, float& var_y, float& length)
{
    int size = track.size();
    float norm = 1./size;
    for(int i = 0; i < size; i++) {
        mean_x += track[i].x;
        mean_y += track[i].y;
    }
    mean_x *= norm;
    mean_y *= norm;

    for(int i = 0; i < size; i++) {
        float temp_x = track[i].x - mean_x;
        float temp_y = track[i].y - mean_y;
        var_x += temp_x*temp_x;
        var_y += temp_y*temp_y;
    }
    var_x *= norm;
    var_y *= norm;
    var_x = sqrt(var_x);
    var_y = sqrt(var_y);

    // remove static trajectory
    if(var_x < min_var && var_y < min_var)
        return false;
    // remove random trajectory
    if( var_x > max_var || var_y > max_var )
        return false;

    float cur_max = 0;
    for(int i = 0; i < size-1; i++) {
        track[i] = track[i+1] - track[i];
        float temp = sqrt(track[i].x*track[i].x + track[i].y*track[i].y);

        length += temp;
        if(temp > cur_max)
            cur_max = temp;
    }

    if(cur_max > max_dis && cur_max > length*0.7)
        return false;

    track.pop_back();
    norm = 1./length;
    // normalize the trajectory
    for(int i = 0; i < size-1; i++)
        track[i] *= norm;

    return true;
}

// detect new feature points in an image without overlapping to previous points
void DenseSample(const Mat& grey, std::vector<Point2f>& points, const double quality, const int min_distance)
{
    int width = grey.cols/min_distance;
    int height = grey.rows/min_distance;

    Mat eig;
    cornerMinEigenVal(grey, eig, 3, 3);

    double maxVal = 0;
    minMaxLoc(eig, 0, &maxVal);
    const double threshold = maxVal*quality;

    std::vector<int> counters(width*height);
    int x_max = min_distance*width;
    int y_max = min_distance*height;

    for(int i = 0; i < points.size(); i++) {
        Point2f point = points[i];
        int x = cvFloor(point.x);
        int y = cvFloor(point.y);

        if(x >= x_max || y >= y_max)
            continue;
        x /= min_distance;
        y /= min_distance;
        counters[y*width+x]++;
    }

    points.clear();
    int index = 0;
    int offset = min_distance/2;
    for(int i = 0; i < height; i++)
    for(int j = 0; j < width; j++, index++) {
        if(counters[index] > 0)
            continue;

        int x = j*min_distance+offset;
        int y = i*min_distance+offset;

        if(eig.at<float>(y, x) > threshold)
            points.push_back(Point2f(float(x), float(y)));
    }
}

void InitPry(const Mat& frame, std::vector<float>& scales, std::vector<Size>& sizes)
{
    int rows = frame.rows, cols = frame.cols;
    float min_size = std::min<int>(rows, cols);

    int nlayers = 0;
    while(min_size >= patch_size) {
        min_size /= scale_stride;
        nlayers++;
    }

    if(nlayers == 0) nlayers = 1; // at least 1 scale 

    scale_num = std::min<int>(scale_num, nlayers);

    scales.resize(scale_num);
    sizes.resize(scale_num);

    scales[0] = 1.;
    sizes[0] = Size(cols, rows);

    for(int i = 1; i < scale_num; i++) {
        scales[i] = scales[i-1] * scale_stride;
        sizes[i] = Size(cvRound(cols/scales[i]), cvRound(rows/scales[i]));
    }
}

void BuildPry(const std::vector<Size>& sizes, const int type, std::vector<Mat>& grey_pyr)
{
    int nlayers = sizes.size();
    grey_pyr.resize(nlayers);

    for(int i = 0; i < nlayers; i++)
        grey_pyr[i].create(sizes[i], type);
}

void DrawTrack(const std::vector<Point2f>& point, const int index, const float scale, Mat& image)
{
    Point2f point0 = point[0];
    point0 *= scale;

    for (int j = 1; j <= index; j++) {
        Point2f point1 = point[j];
        point1 *= scale;

        line(image, point0, point1, Scalar(0,cvFloor(255.0*(j+1.0)/float(index+1.0)),0), 2, 8, 0);
        point0 = point1;
    }
    circle(image, point0, 2, Scalar(0,0,255), -1, 8, 0);
}

void PrintDesc(std::vector<float>& desc, DescInfo& descInfo, TrackInfo& trackInfo)
{
    int tStride = cvFloor(trackInfo.length/descInfo.ntCells);
    float norm = 1./float(tStride);
    int dim = descInfo.dim;
    int pos = 0;
    for(int i = 0; i < descInfo.ntCells; i++) {
        std::vector<float> vec(dim);
        for(int t = 0; t < tStride; t++)
            for(int j = 0; j < dim; j++)
                vec[j] += desc[pos++];
        for(int j = 0; j < dim; j++)
            printf("%.7f\t", vec[j]*norm);
    }
}

#endif /*DESCRIPTORS_H_*/

#ifndef INITIALIZE_H_
#define INITIALIZE_H_

#include "DenseTrack.h"

using namespace cv;

void InitTrackInfo(TrackInfo* trackInfo, int track_length, int init_gap)
{
    trackInfo->length = track_length;
    trackInfo->gap = init_gap;
}

DescMat* InitDescMat(int height, int width, int nBins)
{
    DescMat* descMat = (DescMat*)malloc(sizeof(DescMat));
    descMat->height = height;
    descMat->width = width;
    descMat->nBins = nBins;

    long size = height*width*nBins;
    descMat->desc = (float*)malloc(size*sizeof(float));
    memset(descMat->desc, 0, size*sizeof(float));
    return descMat;
}

void ReleDescMat(DescMat* descMat)
{
    free(descMat->desc);
    free(descMat);
}

void InitDescInfo(DescInfo* descInfo, int nBins, bool isHof, int size, int nxy_cell, int nt_cell)
{
    descInfo->nBins = nBins;
    descInfo->isHof = isHof;
    descInfo->nxCells = nxy_cell;
    descInfo->nyCells = nxy_cell;
    descInfo->ntCells = nt_cell;
    descInfo->dim = nBins*nxy_cell*nxy_cell;
    descInfo->height = size;
    descInfo->width = size;
}

void InitSeqInfo(SeqInfo* seqInfo, char* video)
{
    VideoCapture capture;
    capture.open(video);

    if(!capture.isOpened())
        fprintf(stderr, "Could not initialize capturing..\n");

    // get the number of frames in the video
    int frame_num = 0;
    while(true) {
        Mat frame;
        capture >> frame;

        if(frame.empty())
            break;

        if(frame_num == 0) {
            seqInfo->width = frame.cols;
            seqInfo->height = frame.rows;
        }

        frame_num++;
    }
    seqInfo->length = frame_num;
}

void usage()
{
    fprintf(stderr, "Extract dense trajectories from a video\n\n");
    fprintf(stderr, "Usage: DenseTrack video_file [options]\n");
    fprintf(stderr, "Options:\n");
    fprintf(stderr, "  -h                        Display this message and exit\n");
    fprintf(stderr, "  -S [start frame]          The start frame to compute feature (default: S=0 frame)\n");
    fprintf(stderr, "  -E [end frame]            The end frame for feature computing (default: E=last frame)\n");
    fprintf(stderr, "  -L [trajectory length]    The length of the trajectory (default: L=15 frames)\n");
    fprintf(stderr, "  -W [sampling stride]      The stride for dense sampling feature points (default: W=5 pixels)\n");
    fprintf(stderr, "  -N [neighborhood size]    The neighborhood size for computing the descriptor (default: N=32 pixels)\n");
    fprintf(stderr, "  -s [spatial cells]        The number of cells in the nxy axis (default: nxy=2 cells)\n");
    fprintf(stderr, "  -t [temporal cells]       The number of cells in the nt axis (default: nt=3 cells)\n");
    fprintf(stderr, "  -A [scale number]         The number of maximal spatial scales (default: 8 scales)\n");
    fprintf(stderr, "  -I [initial gap]          The gap for re-sampling feature points (default: 1 frame)\n");
}

bool arg_parse(int argc, char** argv)
{
    int c;
    bool flag = false;
    char* executable = basename(argv[0]);
    while((c = getopt (argc, argv, "hS:E:L:W:N:s:t:A:I:")) != -1)
    switch(c) {
        case 'S':
        start_frame = atoi(optarg);
        flag = true;
        break;
        case 'E':
        end_frame = atoi(optarg);
        flag = true;
        break;
        case 'L':
        track_length = atoi(optarg);
        break;
        case 'W':
        min_distance = atoi(optarg);
        break;
        case 'N':
        patch_size = atoi(optarg);
        break;
        case 's':
        nxy_cell = atoi(optarg);
        break;
        case 't':
        nt_cell = atoi(optarg);
        break;
        case 'A':
        scale_num = atoi(optarg);
        break;
        case 'I':
        init_gap = atoi(optarg);
        break;  

        case 'h':
        usage();
        exit(0);
        break;

        default:
        fprintf(stderr, "error parsing arguments at -%c\n  Try '%s -h' for help.", c, executable );
        abort();
    }
    return flag;
}

#endif /*INITIALIZE_H_*/


#ifndef OPTICALFLOW_H_
#define OPTICALFLOW_H_

#include "DenseTrack.h"

#include <time.h>

using namespace cv;

namespace my
{

static void
FarnebackPolyExp( const Mat& src, Mat& dst, int n, double sigma )
{
    int k, x, y;

    assert( src.type() == CV_32FC1 );
    int width = src.cols;
    int height = src.rows;
    AutoBuffer<float> kbuf(n*6 + 3), _row((width + n*2)*3);
    float* g = kbuf + n;
    float* xg = g + n*2 + 1;
    float* xxg = xg + n*2 + 1;
    float *row = (float*)_row + n*3;

    if( sigma < FLT_EPSILON )
        sigma = n*0.3;

    double s = 0.;
    for( x = -n; x <= n; x++ )
    {
        g[x] = (float)std::exp(-x*x/(2*sigma*sigma));
        s += g[x];
    }

    s = 1./s;
    for( x = -n; x <= n; x++ )
    {
        g[x] = (float)(g[x]*s);
        xg[x] = (float)(x*g[x]);
        xxg[x] = (float)(x*x*g[x]);
    }

    Mat_<double> G = Mat_<double>::zeros(6, 6);

    for( y = -n; y <= n; y++ )
        for( x = -n; x <= n; x++ )
        {
            G(0,0) += g[y]*g[x];
            G(1,1) += g[y]*g[x]*x*x;
            G(3,3) += g[y]*g[x]*x*x*x*x;
            G(5,5) += g[y]*g[x]*x*x*y*y;
        }

    //G[0][0] = 1.;
    G(2,2) = G(0,3) = G(0,4) = G(3,0) = G(4,0) = G(1,1);
    G(4,4) = G(3,3);
    G(3,4) = G(4,3) = G(5,5);

    // invG:
    // [ x        e  e    ]
    // [    y             ]
    // [       y          ]
    // [ e        z       ]
    // [ e           z    ]
    // [                u ]
    Mat_<double> invG = G.inv(DECOMP_CHOLESKY);
    double ig11 = invG(1,1), ig03 = invG(0,3), ig33 = invG(3,3), ig55 = invG(5,5);

    dst.create( height, width, CV_32FC(5) );

    for( y = 0; y < height; y++ )
    {
        float g0 = g[0], g1, g2;
        float *srow0 = (float*)(src.data + src.step*y), *srow1 = 0;
        float *drow = (float*)(dst.data + dst.step*y);

        // vertical part of convolution
        for( x = 0; x < width; x++ )
        {
            row[x*3] = srow0[x]*g0;
            row[x*3+1] = row[x*3+2] = 0.f;
        }

        for( k = 1; k <= n; k++ )
        {
            g0 = g[k]; g1 = xg[k]; g2 = xxg[k];
            srow0 = (float*)(src.data + src.step*std::max(y-k,0));
            srow1 = (float*)(src.data + src.step*std::min(y+k,height-1));

            for( x = 0; x < width; x++ )
            {
                float p = srow0[x] + srow1[x];
                float t0 = row[x*3] + g0*p;
                float t1 = row[x*3+1] + g1*(srow1[x] - srow0[x]);
                float t2 = row[x*3+2] + g2*p;

                row[x*3] = t0;
                row[x*3+1] = t1;
                row[x*3+2] = t2;
            }
        }

        // horizontal part of convolution
        for( x = 0; x < n*3; x++ )
        {
            row[-1-x] = row[2-x];
            row[width*3+x] = row[width*3+x-3];
        }

        for( x = 0; x < width; x++ )
        {
            g0 = g[0];
            // r1 ~ 1, r2 ~ x, r3 ~ y, r4 ~ x^2, r5 ~ y^2, r6 ~ xy
            double b1 = row[x*3]*g0, b2 = 0, b3 = row[x*3+1]*g0,
                b4 = 0, b5 = row[x*3+2]*g0, b6 = 0;

            for( k = 1; k <= n; k++ )
            {
                double tg = row[(x+k)*3] + row[(x-k)*3];
                g0 = g[k];
                b1 += tg*g0;
                b4 += tg*xxg[k];
                b2 += (row[(x+k)*3] - row[(x-k)*3])*xg[k];
                b3 += (row[(x+k)*3+1] + row[(x-k)*3+1])*g0;
                b6 += (row[(x+k)*3+1] - row[(x-k)*3+1])*xg[k];
                b5 += (row[(x+k)*3+2] + row[(x-k)*3+2])*g0;
            }

            // do not store r1
            drow[x*5+1] = (float)(b2*ig11);
            drow[x*5] = (float)(b3*ig11);
            drow[x*5+3] = (float)(b1*ig03 + b4*ig33);
            drow[x*5+2] = (float)(b1*ig03 + b5*ig33);
            drow[x*5+4] = (float)(b6*ig55);
        }
    }

    row -= n*3;
}

static void
FarnebackUpdateMatrices( const Mat& _R0, const Mat& _R1, const Mat& _flow, Mat& matM, int _y0, int _y1 )
{
    const int BORDER = 5;
    static const float border[BORDER] = {0.14f, 0.14f, 0.4472f, 0.4472f, 0.4472f};

    int x, y, width = _flow.cols, height = _flow.rows;
    const float* R1 = (float*)_R1.data;
    size_t step1 = _R1.step/sizeof(R1[0]);

    matM.create(height, width, CV_32FC(5));

    for( y = _y0; y < _y1; y++ )
    {
        const float* flow = (float*)(_flow.data + y*_flow.step);
        const float* R0 = (float*)(_R0.data + y*_R0.step);
        float* M = (float*)(matM.data + y*matM.step);

        for( x = 0; x < width; x++ )
        {
            float dx = flow[x*2], dy = flow[x*2+1];
            float fx = x + dx, fy = y + dy;

            int x1 = cvFloor(fx), y1 = cvFloor(fy);
            const float* ptr = R1 + y1*step1 + x1*5;
            float r2, r3, r4, r5, r6;

            fx -= x1; fy -= y1;

            if( (unsigned)x1 < (unsigned)(width-1) &&
                (unsigned)y1 < (unsigned)(height-1) )
            {
                float a00 = (1.f-fx)*(1.f-fy), a01 = fx*(1.f-fy),
                      a10 = (1.f-fx)*fy, a11 = fx*fy;

                r2 = a00*ptr[0] + a01*ptr[5] + a10*ptr[step1] + a11*ptr[step1+5];
                r3 = a00*ptr[1] + a01*ptr[6] + a10*ptr[step1+1] + a11*ptr[step1+6];
                r4 = a00*ptr[2] + a01*ptr[7] + a10*ptr[step1+2] + a11*ptr[step1+7];
                r5 = a00*ptr[3] + a01*ptr[8] + a10*ptr[step1+3] + a11*ptr[step1+8];
                r6 = a00*ptr[4] + a01*ptr[9] + a10*ptr[step1+4] + a11*ptr[step1+9];

                r4 = (R0[x*5+2] + r4)*0.5f;
                r5 = (R0[x*5+3] + r5)*0.5f;
                r6 = (R0[x*5+4] + r6)*0.25f;
            }
            else
            {
                r2 = r3 = 0.f;
                r4 = R0[x*5+2];
                r5 = R0[x*5+3];
                r6 = R0[x*5+4]*0.5f;
            }

            r2 = (R0[x*5] - r2)*0.5f;
            r3 = (R0[x*5+1] - r3)*0.5f;

            r2 += r4*dy + r6*dx;
            r3 += r6*dy + r5*dx;

            if( (unsigned)(x - BORDER) >= (unsigned)(width - BORDER*2) ||
                (unsigned)(y - BORDER) >= (unsigned)(height - BORDER*2))
            {
                float scale = (x < BORDER ? border[x] : 1.f)*
                    (x >= width - BORDER ? border[width - x - 1] : 1.f)*
                    (y < BORDER ? border[y] : 1.f)*
                    (y >= height - BORDER ? border[height - y - 1] : 1.f);

                r2 *= scale; r3 *= scale; r4 *= scale;
                r5 *= scale; r6 *= scale;
            }

            M[x*5]   = r4*r4 + r6*r6; // G(1,1)
            M[x*5+1] = (r4 + r5)*r6;  // G(1,2)=G(2,1)
            M[x*5+2] = r5*r5 + r6*r6; // G(2,2)
            M[x*5+3] = r4*r2 + r6*r3; // h(1)
            M[x*5+4] = r6*r2 + r5*r3; // h(2)
        }
    }
}

static void
FarnebackUpdateFlow_GaussianBlur( const Mat& _R0, const Mat& _R1,
                                  Mat& _flow, Mat& matM, int block_size,
                                  bool update_matrices )
{
    int x, y, i, width = _flow.cols, height = _flow.rows;
    int m = block_size/2;
    int y0 = 0, y1;
    int min_update_stripe = std::max((1 << 10)/width, block_size);
    double sigma = m*0.3, s = 1;

    AutoBuffer<float> _vsum((width+m*2+2)*5 + 16), _hsum(width*5 + 16);
    AutoBuffer<float, 4096> _kernel((m+1)*5 + 16);
    AutoBuffer<float*, 1024> _srow(m*2+1);
    float *vsum = alignPtr((float*)_vsum + (m+1)*5, 16), *hsum = alignPtr((float*)_hsum, 16);
    float* kernel = (float*)_kernel;
    const float** srow = (const float**)&_srow[0];
    kernel[0] = (float)s;

    for( i = 1; i <= m; i++ )
    {
        float t = (float)std::exp(-i*i/(2*sigma*sigma) );
        kernel[i] = t;
        s += t*2;
    }

    s = 1./s;
    for( i = 0; i <= m; i++ )
        kernel[i] = (float)(kernel[i]*s);

#if CV_SSE2
    float* simd_kernel = alignPtr(kernel + m+1, 16);
    volatile bool useSIMD = checkHardwareSupport(CV_CPU_SSE);
    if( useSIMD )
    {
        for( i = 0; i <= m; i++ )
            _mm_store_ps(simd_kernel + i*4, _mm_set1_ps(kernel[i]));
    }
#endif

    // compute blur(G)*flow=blur(h)
    for( y = 0; y < height; y++ )
    {
        double g11, g12, g22, h1, h2;
        float* flow = (float*)(_flow.data + _flow.step*y);

        // vertical blur
        for( i = 0; i <= m; i++ )
        {
            srow[m-i] = (const float*)(matM.data + matM.step*std::max(y-i,0));
            srow[m+i] = (const float*)(matM.data + matM.step*std::min(y+i,height-1));
        }

        x = 0;
#if CV_SSE2
        if( useSIMD )
        {
            for( ; x <= width*5 - 16; x += 16 )
            {
                const float *sptr0 = srow[m], *sptr1;
                __m128 g4 = _mm_load_ps(simd_kernel);
                __m128 s0, s1, s2, s3;
                s0 = _mm_mul_ps(_mm_loadu_ps(sptr0 + x), g4);
                s1 = _mm_mul_ps(_mm_loadu_ps(sptr0 + x + 4), g4);
                s2 = _mm_mul_ps(_mm_loadu_ps(sptr0 + x + 8), g4);
                s3 = _mm_mul_ps(_mm_loadu_ps(sptr0 + x + 12), g4);

                for( i = 1; i <= m; i++ )
                {
                    __m128 x0, x1;
                    sptr0 = srow[m+i], sptr1 = srow[m-i];
                    g4 = _mm_load_ps(simd_kernel + i*4);
                    x0 = _mm_add_ps(_mm_loadu_ps(sptr0 + x), _mm_loadu_ps(sptr1 + x));
                    x1 = _mm_add_ps(_mm_loadu_ps(sptr0 + x + 4), _mm_loadu_ps(sptr1 + x + 4));
                    s0 = _mm_add_ps(s0, _mm_mul_ps(x0, g4));
                    s1 = _mm_add_ps(s1, _mm_mul_ps(x1, g4));
                    x0 = _mm_add_ps(_mm_loadu_ps(sptr0 + x + 8), _mm_loadu_ps(sptr1 + x + 8));
                    x1 = _mm_add_ps(_mm_loadu_ps(sptr0 + x + 12), _mm_loadu_ps(sptr1 + x + 12));
                    s2 = _mm_add_ps(s2, _mm_mul_ps(x0, g4));
                    s3 = _mm_add_ps(s3, _mm_mul_ps(x1, g4));
                }

                _mm_store_ps(vsum + x, s0);
                _mm_store_ps(vsum + x + 4, s1);
                _mm_store_ps(vsum + x + 8, s2);
                _mm_store_ps(vsum + x + 12, s3);
            }

            for( ; x <= width*5 - 4; x += 4 )
            {
                const float *sptr0 = srow[m], *sptr1;
                __m128 g4 = _mm_load_ps(simd_kernel);
                __m128 s0 = _mm_mul_ps(_mm_loadu_ps(sptr0 + x), g4);

                for( i = 1; i <= m; i++ )
                {
                    sptr0 = srow[m+i], sptr1 = srow[m-i];
                    g4 = _mm_load_ps(simd_kernel + i*4);
                    __m128 x0 = _mm_add_ps(_mm_loadu_ps(sptr0 + x), _mm_loadu_ps(sptr1 + x));
                    s0 = _mm_add_ps(s0, _mm_mul_ps(x0, g4));
                }
                _mm_store_ps(vsum + x, s0);
            }
        }
#endif
        for( ; x < width*5; x++ )
        {
            float s0 = srow[m][x]*kernel[0];
            for( i = 1; i <= m; i++ )
                s0 += (srow[m+i][x] + srow[m-i][x])*kernel[i];
            vsum[x] = s0;
        }

        // update borders
        for( x = 0; x < m*5; x++ )
        {
            vsum[-1-x] = vsum[4-x];
            vsum[width*5+x] = vsum[width*5+x-5];
        }

        // horizontal blur
        x = 0;
#if CV_SSE2
        if( useSIMD )
        {
            for( ; x <= width*5 - 8; x += 8 )
            {
                __m128 g4 = _mm_load_ps(simd_kernel);
                __m128 s0 = _mm_mul_ps(_mm_loadu_ps(vsum + x), g4);
                __m128 s1 = _mm_mul_ps(_mm_loadu_ps(vsum + x + 4), g4);

                for( i = 1; i <= m; i++ )
                {
                    g4 = _mm_load_ps(simd_kernel + i*4);
                    __m128 x0 = _mm_add_ps(_mm_loadu_ps(vsum + x - i*5),
                                           _mm_loadu_ps(vsum + x + i*5));
                    __m128 x1 = _mm_add_ps(_mm_loadu_ps(vsum + x - i*5 + 4),
                                           _mm_loadu_ps(vsum + x + i*5 + 4));
                    s0 = _mm_add_ps(s0, _mm_mul_ps(x0, g4));
                    s1 = _mm_add_ps(s1, _mm_mul_ps(x1, g4));
                }

                _mm_store_ps(hsum + x, s0);
                _mm_store_ps(hsum + x + 4, s1);
            }
        }
#endif
        for( ; x < width*5; x++ )
        {
            float sum = vsum[x]*kernel[0];
            for( i = 1; i <= m; i++ )
                sum += kernel[i]*(vsum[x - i*5] + vsum[x + i*5]);
            hsum[x] = sum;
        }

        for( x = 0; x < width; x++ )
        {
            g11 = hsum[x*5];
            g12 = hsum[x*5+1];
            g22 = hsum[x*5+2];
            h1 = hsum[x*5+3];
            h2 = hsum[x*5+4];

            double idet = 1./(g11*g22 - g12*g12 + 1e-3);

            flow[x*2] = (float)((g11*h2-g12*h1)*idet);
            flow[x*2+1] = (float)((g22*h1-g12*h2)*idet);
        }

        y1 = y == height - 1 ? height : y - block_size;
        if( update_matrices && (y1 == height || y1 >= y0 + min_update_stripe) )
        {
            FarnebackUpdateMatrices( _R0, _R1, _flow, matM, y0, y1 );
            y0 = y1;
        }
    }
}

// in-place median blur for optical flow
void MedianBlurFlow(Mat& flow, const int ksize)
{
    Mat channels[2];
    split(flow, channels);
    medianBlur(channels[0], channels[0], ksize);
    medianBlur(channels[1], channels[1], ksize);
    merge(channels, 2, flow);
}

void FarnebackPolyExpPyr(const Mat& img, std::vector<Mat>& poly_exp_pyr,
                         std::vector<float>& fscales, int poly_n, double poly_sigma)
{
    Mat fimg;

    for(int k = 0; k < poly_exp_pyr.size(); k++)
    {
        double sigma = (fscales[k]-1)*0.5;
        int smooth_sz = cvRound(sigma*5)|1;
        smooth_sz = std::max(smooth_sz, 3);

        int width = poly_exp_pyr[k].cols;
        int height = poly_exp_pyr[k].rows;

        Mat R, I;

        img.convertTo(fimg, CV_32F);
        GaussianBlur(fimg, fimg, Size(smooth_sz, smooth_sz), sigma, sigma);
        resize(fimg, I, Size(width, height), CV_INTER_LINEAR);

        FarnebackPolyExp(I, R, poly_n, poly_sigma);
        R.copyTo(poly_exp_pyr[k]);
    }
}

void calcOpticalFlowFarneback(std::vector<Mat>& prev_poly_exp_pyr, std::vector<Mat>& poly_exp_pyr,
                              std::vector<Mat>& flow_pyr, int winsize, int iterations)
{
    int i, k;
    Mat prevFlow, flow;

    for( k = flow_pyr.size() - 1; k >= 0; k-- )
    {
        int width = flow_pyr[k].cols;
        int height = flow_pyr[k].rows;

        flow.create( height, width, CV_32FC2 );

        if( !prevFlow.data )
            flow = Mat::zeros( height, width, CV_32FC2 );
        else {
            resize( prevFlow, flow, Size(width, height), 0, 0, INTER_LINEAR );
            flow *= scale_stride;
        }

        Mat R[2], M;

        prev_poly_exp_pyr[k].copyTo(R[0]);
        poly_exp_pyr[k].copyTo(R[1]);

        FarnebackUpdateMatrices( R[0], R[1], flow, M, 0, flow.rows );

        for( i = 0; i < iterations; i++ )
            FarnebackUpdateFlow_GaussianBlur( R[0], R[1], flow, M, winsize, i < iterations - 1 );
        
        MedianBlurFlow(flow, 5);
        prevFlow = flow;
        flow.copyTo(flow_pyr[k]);
    }
}

}

#endif /*OPTICALFLOW_H_*/
